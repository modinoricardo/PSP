package principal;

import java.util.Iterator;

public class Barca extends Thread {

	private Isla isla;
	private int capacidad;
	private int naufragosSalvados = 0;
	private int tiempoTardado = 0;

	public Barca(Isla isla, int maxCapacidad, int minCapacidad) {

		this.isla = isla;
		this.capacidad = (int) (Math.random() * (maxCapacidad - minCapacidad + 1)) + minCapacidad;
	}
	
	public void imprimeTotalSalvaciones() {
		for(int i=0;i<15;i++) {
			System.out.print("-");
		}
		System.out.println();
		System.out.println("La barca "+this.getName()+" salvo a "+naufragosSalvados+" naufragos");
		for(int i=0;i<15;i++) {
			System.out.print("-");
		}
		System.out.println();
	}
	
	public void imprimeTotalTiempoTardado() {
		for(int i=0;i<15;i++) {
			System.out.print("-");
		}
		System.out.println();
		System.out.println("La barca "+this.getName()+" tardo un total de "+tiempoTardado+" segundos");
		for(int i=0;i<15;i++) {
			System.out.print("-");
		}
	}

	@Override
	public void run() {
		System.out.println("La barca actual es " + this.getName() + " y tiene " + capacidad + " plazas");
		while (!isla.estaVacia()) {

			naufragosSalvados =  isla.rescate(capacidad, this.getName());

			try {
				sleep(3000);
				tiempoTardado += 3000;
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		System.out.println("Barco "+this.getName()+" ha terminado");
		
		imprimeTotalSalvaciones();
		imprimeTotalTiempoTardado();
		
	}

}
